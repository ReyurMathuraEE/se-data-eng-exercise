name: 'Terraform'

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'

permissions:
  contents: read
  id-token: "write"

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    env:
          TF_VAR_account_name: ${{ secrets.TF_VAR_ACCOUNT_NAME }}
          TF_VAR_database: ${{ secrets.TF_VAR_DATABASE }}
          TF_VAR_organization_name: ${{ secrets.TF_VAR_ORGANIZATION_NAME }}
          TF_VAR_password: ${{ secrets.TF_VAR_PASSWORD }}
          TF_VAR_schema: ${{ secrets.TF_VAR_SCHEMA }}
          TF_VAR_user: ${{ secrets.TF_VAR_USER }}
          TF_VAR_private_key: ${{ secrets.TF_VAR_PRIVATE_KEY }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.6 # Specify the Terraform version you use

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Google Auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_KEYFILE_JSON }}
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: | 
        echo "Private key is: $TF_VAR_private_key" >> $GITHUB_ENV && cd terraform && terraform init -input=false

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: cd terraform && terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: cd terraform && terraform apply -auto-approve -input=false || true
